/**
 * @fileoverview Firestore Security Rules for Blogify CMS.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by implementing strict ownership and role-based access control.
 * It uses path-based authorization and denormalized data to avoid complex queries within the rules.
 *
 * Data Structure:
 * - /artifacts/{__app_id}/public/data/blog_posts/{blogPostId}: Stores blog post data. Each document contains an `authorId` field for ownership checks.
 * - /authors/{authorId}: Stores author profile information.
 *
 * Key Security Decisions:
 * - Blog posts are publicly readable but only authors can create, update, or delete their own posts.
 * - Authors can only manage their own profile data.
 *
 * Denormalization for Authorization:
 * - The `BlogPost` entity includes an `authorId` field to avoid needing to query the `authors` collection for authorization.
 *
 * Structural Segregation:
 * - The system uses separate collections for blog posts and author profiles to simplify security rules and improve query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to blog posts while restricting write access to the author.
     * @path /artifacts/{__app_id}/public/data/blog_posts/{blogPostId}
     * @allow (get, list): Anyone can read blog posts.
     * @allow (create): An author can create a blog post if the `authorId` matches their `auth.uid`.
     * @allow (update, delete): An author can update/delete their own blog posts.
     * @deny (create): A non-authenticated user cannot create a blog post.
     * @deny (update, delete): A user cannot update/delete a blog post they don't own.
     * @principle Public read, owner-only writes.
     */
    match /artifacts/{__app_id}/public/data/blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows an author to manage their own profile.
     * @path /authors/{authorId}
     * @allow (get): Any authenticated user can get an author's profile.
     * @allow (list): Any authenticated user can list authors.
     * @allow (create): An author can create their profile if their `auth.uid` matches the `authorId`.
     * @allow (update, delete): An author can update/delete their own profile.
     * @deny (create): A non-authenticated user cannot create an author profile.
     * @deny (update, delete): A user cannot update/delete another author's profile.
     * @principle Enforces document ownership for author profiles.
     */
    match /authors/{authorId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(authorId);
      allow update, delete: if isSignedIn() && isExistingOwner(authorId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}