/**
 * @fileoverview Firestore Security Rules for Blogify CMS.
 *
 * Core Philosophy:
 * This ruleset enforces a public-read, owner-write model for blog posts.  Anyone can read the blog posts, but only the authenticated author can create, update, or delete their own posts.
 *
 * Data Structure:
 * - Blog posts are stored under `/artifacts/{appId}/public/data/blog_posts/{blogPostId}`.  Each blog post document must contain an `authorId` field matching the authenticated user's UID.
 * - The `appId` parameter is intended to identify the specific Blogify CMS application (presumably from an environment variable).
 *
 * Key Security Decisions:
 * - Public read access is granted to the `/artifacts/{appId}/public/data/blog_posts/{blogPostId}` collection.
 * - Strict ownership is enforced for all write operations on blog posts using the `authorId` field.
 * - Author profiles are not explicitly handled in these rules; they would require a separate `match` block.
 *
 * Denormalization for Authorization:
 * - The `authorId` field *must* be present in each `BlogPost` document to enable secure owner-only write access. This avoids costly `get()` calls to a separate author profile document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to blog posts while restricting write access to the author.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (get, list): if true;
     * @allow (create): User 'user_abc' can create a blog post with authorId: 'user_abc'.
     *   request.auth.uid == 'user_abc' && request.resource.data.authorId == 'user_abc'
     * @allow (update, delete): User 'user_abc' can update/delete their blog post (resource.data.authorId == 'user_abc').
     *   request.auth.uid == 'user_abc' && resource.data.authorId == 'user_abc'
     * @deny (create): User 'user_xyz' cannot create a blog post with authorId: 'user_abc'.
     *   request.auth.uid == 'user_xyz' && request.resource.data.authorId == 'user_abc'
     * @deny (update, delete): User 'user_xyz' cannot update/delete a blog post owned by 'user_abc'.
     *   request.auth.uid == 'user_xyz' && resource.data.authorId == 'user_abc'
     * @principle Public read, owner-only writes enforced via the authorId field.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // --- Helper Functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(authorId) {
      return isOwner(authorId) && resource != null;
    }
  }
}