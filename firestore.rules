/**
 * @fileoverview Firestore Security Rules for Blogify CMS.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for blog posts and owner-only write access.
 * Authors can create, update, and delete their own blog posts. Authors can read blog posts and other author's blog posts.
 * Author profiles are only readable and writeable by the author themselves.
 *
 * Data Structure:
 * - /artifacts/{__app_id}/public/data/blog_posts/{blogPostId}: Stores blog posts. The `authorId` field is used for authorization.
 * - /authors/{authorId}: Stores author profiles.
 *
 * Key Security Decisions:
 * - Blog posts are publicly readable to allow display on the homepage and category pages.
 * - Blog posts can only be created, updated, or deleted by the author (owner) to ensure content integrity.
 * - Author profiles can only be read or modified by the author themselves, protecting personal information.
 * - Listing of authors is not explicitly denied, implying it is permitted. Listing of blog posts is public.
 *
 * Denormalization for Authorization:
 * - The `BlogPost` entity includes an `authorId` field to avoid costly `get()` calls to the `/authors` collection during authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to blog post documents.
     * @path /artifacts/{__app_id}/public/data/blog_posts/{blogPostId}
     * @allow (get, list) All users can read blog posts.
     * @allow (create) Authenticated user can create a blog post if the authorId matches their UID.
     * @allow (update, delete) Authenticated user can update/delete a blog post if they are the author.
     * @deny (create) Non-authenticated user attempts to create a blog post.
     * @deny (update, delete) Authenticated user attempts to update/delete a blog post they don't own.
     * @principle Public read, owner-only write. Enforces document ownership for writes and validates authorId on create.
     */
    match /artifacts/{__app_id}/public/data/blog_posts/{blogPostId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Manages access to author profile documents.
     * @path /authors/{authorId}
     * @allow (get, list) All users can read Author documents
     * @allow (create) Authenticated user can create their own author profile if the authorId matches their UID.
     * @allow (update, delete) Authenticated user can update/delete their own author profile.
     * @deny (create) Non-authenticated user attempts to create an author profile.
     * @deny (update, delete) Authenticated user attempts to update/delete an author profile they don't own.
     * @principle Enforces document ownership for all operations.
     */
    match /authors/{authorId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(authorId);
      allow update: if isSignedIn() && isExistingOwner(authorId);
      allow delete: if isSignedIn() && isExistingOwner(authorId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}