/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing ownership-based access control for blog posts.
 * It assumes public read access for published blog posts while restricting write access to the author.
 *
 * Data Structure:
 * The data is organized under `/artifacts/{appId}/public/data/blog_posts/{blogPostId}`.
 * - `appId` is expected to match the application's ID.
 * - `blogPostId` is the unique identifier for each blog post.
 *
 * Key Security Decisions:
 * - Public read access is granted for all blog posts to enable real-time blog display.
 * - Write access (create, update, delete) is restricted to the author of the blog post.
 * - The 'authorId' field within the BlogPost document MUST match the authenticated user's UID for write operations.
 *
 * Denormalization for Authorization:
 * The 'BlogPost' entity requires an 'authorId' field. This field is used to determine ownership and authorize write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /artifacts/{appId}/public/data/blog_posts/{blogPostId} collection.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (list) Authenticated user can list blog posts.
     * @allow (get) Unauthenticated user can get a blog post.
     * @allow (create) Authenticated user with matching authorId can create a blog post.
     * @deny (create) Authenticated user with non-matching authorId cannot create a blog post.
     * @deny (update) Unauthenticated user cannot update a blog post.
     * @deny (delete) Unauthenticated user cannot delete a blog post.
     * @principle Public read access with owner-only writes enforced via the 'authorId' field.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}