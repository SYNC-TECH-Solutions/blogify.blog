/**
 * @fileOverview Firestore Security Rules for Blogify CMS.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access and owner-only write access for blog posts,
 * and owner-only access for author profiles.
 *
 * Data Structure:
 * - /artifacts/{appId}/public/data/blog_posts/{blogPostId}: Stores blog posts with public read access and author-restricted writes. The `authorId` field is crucial for write authorization.
 * - /authors/{authorId}: Stores author profiles with owner-only access.
 *
 * Key Security Decisions:
 * - Public read access is granted for blog posts to maximize content visibility.
 * - Write access to blog posts is restricted to the author to maintain content integrity.
 * - Author profiles are private and accessible only to the author themselves.
 * - Listing authors is disallowed.
 *
 * Denormalization for Authorization:
 * The `authorId` field is denormalized within the blog post documents. This allows for simple and efficient
 * ownership checks in the security rules without requiring additional database reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to blog posts and restricts write access to the author.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (get, list): Any user can read blog posts.
     * @allow (create): The author can create a blog post if the authorId matches their UID.
     * @allow (update, delete): The author can update/delete their own blog post.
     * @deny (create): A user cannot create a blog post with an authorId that does not match their UID.
     * @deny (update, delete): A user cannot update/delete a blog post that they do not own.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Grants owner-only access to author profiles.
     * @path /authors/{authorId}
     * @allow (create): The author can create their own profile.
     * @allow (get): The author can read their own profile.
     * @allow (update, delete): The author can update/delete their own profile.
     * @deny (create): A user cannot create an author profile with an ID that does not match their UID.
     * @deny (get): A user cannot read another author's profile.
     * @deny (update, delete): A user cannot update/delete another author's profile.
     * @deny (list): Listing authors is not permitted.
     * @principle Restricts access to a user's own data tree.
     */
    match /authors/{authorId} {
      allow create: if isSignedIn() && isOwner(authorId);
      allow get: if isSignedIn() && isOwner(authorId);
      allow update, delete: if isSignedIn() && isExistingOwner(authorId);
      allow list: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}