/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and skipping data validation.
 * It uses a public-read, owner-write model for blog posts, allowing any user to read but restricting creation, updates, and deletion to the post's author.
 *
 * Data Structure:
 * - /blog_posts/{postId}: Contains blog post documents. Each document must have an `authorId` field matching the author's UID.
 *
 * Key Security Decisions:
 * - Blog posts are publicly readable.
 * - Only the author of a blog post can create, update, or delete it.
 * - Data validation is skipped to allow for quick schema changes during prototyping.
 *
 * Denormalization for Authorization:
 * - The `authorId` field within each `/blog_posts/{postId}` document is used to determine ownership. This avoids needing to perform additional reads to check ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read blog posts, but only the author can create, update, or delete them.
     * @path /blog_posts/{postId}
     * @allow (get, list): Any user can read any blog post.
     * @allow (create): User with UID 'user123' can create a blog post with `authorId: 'user123'`.
     * @allow (update, delete): User with UID 'user123' can update/delete a blog post where `authorId` is 'user123'.
     * @deny (create): User with UID 'user456' cannot create a blog post with `authorId: 'user123'`.
     * @deny (update, delete): User with UID 'user456' cannot update/delete a blog post where `authorId` is 'user123'.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /blog_posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in; otherwise, false.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the provided userId matches the authenticated user's UID.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the userId matches the authenticated user's UID; otherwise, false.
     */
    function isOwner(userId) {
      return isSignedIn() && userId == request.auth.uid;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the document exists; otherwise, false.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}