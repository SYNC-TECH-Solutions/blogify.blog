/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization, while relaxing data validation.
 * It uses a public-read, owner-write model for blog posts, allowing anyone to read published content while
 * restricting modifications to the author.
 *
 * Data Structure:
 * Blog posts are stored in the `/blog_posts/{postId}` collection.
 *
 * Key Security Decisions:
 * - Blog posts are publicly readable (get, list) to facilitate content discovery.
 * - Blog posts can only be created, updated, or deleted by their author.
 *
 * Denormalization for Authorization:
 * The `BlogPost` entity requires an `authorId` field. This field is used to enforce ownership for write operations.
 *
 * Structural Segregation:
 * Published and draft blog posts are distinguished by the `isPublished` field within a single `blog_posts` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access control for individual blog posts.
     * @path /blog_posts/{postId}
     * @allow (get, list): Any user can read blog posts.
     * @allow (create): Only the authenticated author can create a blog post, and the authorId must match.
     * @allow (update, delete): Only the original author can modify or delete their blog post.
     * @deny (create): Non-authenticated users cannot create blog posts.
     * @deny (update, delete): Non-authenticated users cannot modify or delete blog posts.
     * @deny (update): Authors cannot change the authorId of a blog post.
     * @principle Enforces public read access with owner-only writes, and validates ownership on creation.
     */
    match /blog_posts/{postId} {
      // Allow anyone to read blog posts.
      allow get: if true;
      allow list: if true;

      // Only allow authenticated users to create blog posts if the authorId matches their UID.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // Only allow the author to update or delete the blog post.
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);

    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}