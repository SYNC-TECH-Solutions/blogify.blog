/**
 * @fileoverview Firestore Security Rules for Blogify CMS.
 *
 * Core Philosophy:
 * This ruleset prioritizes a public-read, owner-write model for blog posts. Anyone can read published blog posts, but only the author can modify or delete them.  Author profiles are private, accessible only to themselves.
 *
 * Data Structure:
 * - `/artifacts/{__app_id}/public/data/blog_posts/{blogPostId}`: Stores blog post data, including a denormalized `authorId` for efficient authorization.
 * - `/authors/{authorId}`: Stores author profiles.
 *
 * Key Security Decisions:
 * - Blog posts are publicly readable (`get`, `list`).
 * - Only the author can create, update, or delete their blog posts, enforced by checking `authorId`.
 * - Authors can only read, update, or delete their own profiles.
 * - Listing of authors is disallowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * The `authorId` is denormalized into the `blog_posts` collection to avoid costly `get()` calls to the `/authors/{authorId}` collection. This allows for simple ownership checks directly on the blog post document.
 *
 * Structural Segregation:
 * Blog posts and author profiles are stored in separate top-level collections, reflecting their distinct access requirements (public vs. private).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to blog posts, but restricts write access to the author.
     * @path /artifacts/{__app_id}/public/data/blog_posts/{blogPostId}
     * @allow get, list: Anyone can read blog posts.
     * @allow create: Only the author can create a blog post with their authorId.
     * @allow update, delete: Only the author can update or delete their own blog posts.
     * @deny create: If the authorId does not match the authenticated user's ID.
     * @deny update, delete: If the authenticated user is not the author of the existing blog post.
     * @principle Enforces public read access and document ownership for writes based on the 'authorId' field.
     */
    match /artifacts/{__app_id}/public/data/blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows authors to manage their own profiles.
     * @path /authors/{authorId}
     * @allow get: The author can read their own profile.
     * @allow create: The author can create their own profile if the authorId matches their UID.
     * @allow update, delete: The author can update or delete their own profile.
     * @deny get: If the authenticated user is not the author of the profile.
     * @deny create: If the authorId does not match the authenticated user's ID.
     * @deny update, delete: If the authenticated user is not the author of the profile.
     * @deny list: Listing authors is not allowed.
     * @principle Enforces user-ownership for author profiles.
     */
    match /authors/{authorId} {
      allow get: if isSignedIn() && isOwner(authorId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(authorId);
      allow update: if isSignedIn() && isExistingOwner(authorId);
      allow delete: if isSignedIn() && isExistingOwner(authorId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource based on the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}