/**
 * @fileoverview Firestore Security Rules for Blogify CMS.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. Blog posts are publicly readable for the homepage and categories, but only the author can create, update, or delete them. Author profiles are readable and writable only by the author themselves.
 *
 * Data Structure:
 * - `/artifacts/{__app_id}/public/data/blog_posts/{blogPostId}`: Stores blog post data. The `authorId` field is denormalized to enable efficient ownership checks.
 * - `/authors/{authorId}`: Stores author profile data.
 *
 * Key Security Decisions:
 * - Blog posts are publicly readable via `get` and `list`.
 * - Blog posts can only be created, updated, or deleted by the author (`authorId` must match `request.auth.uid`).
 * - Author profiles are readable and writable only by the author.
 *
 * Denormalization for Authorization:
 * - The `authorId` field is denormalized into the `/artifacts/{__app_id}/public/data/blog_posts/{blogPostId}` document. This avoids costly `get()` calls to the `/authors/{authorId}` collection to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to blog posts, but restricts write access to the author.
     * @path /artifacts/{__app_id}/public/data/blog_posts/{blogPostId}
     * @allow (get, list) Allows anyone to read blog posts for the homepage and category listings.
     * @allow (create) Allows an author with UID 'user_abc' to create a blog post with 'authorId': 'user_abc'.
     * @allow (update, delete) Allows an author with UID 'user_abc' to update/delete a blog post where resource.data.authorId == 'user_abc'.
     * @deny (create) Denies a user with UID 'user_xyz' from creating a blog post with 'authorId': 'user_abc'.
     * @deny (update, delete) Denies a non-author with UID 'user_xyz' from updating/deleting a blog post where resource.data.authorId == 'user_abc'.
     * @principle Allows public read but enforces document ownership for writes.
     */
    match /artifacts/{__app_id}/public/data/blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows an author to read and write their own author profile.
     * @path /authors/{authorId}
     * @allow (get, list) Allows an author with UID 'user_abc' to read their profile at /authors/user_abc.
     * @allow (create, update, delete) Allows an author with UID 'user_abc' to create/update/delete their profile at /authors/user_abc.
     * @deny (get, list) Denies a non-author with UID 'user_xyz' from reading the profile at /authors/user_abc.
     * @deny (create, update, delete) Denies a non-author with UID 'user_xyz' from creating/updating/deleting the profile at /authors/user_abc.
     * @principle Restricts access to a user's own data tree.
     */
    match /authors/{authorId} {
      allow get: if isOwner(authorId);
      allow list: if false;
      allow create: if isOwner(authorId) && request.auth.uid == authorId;
      allow update: if isOwner(authorId) && request.auth.uid == authorId;
      allow delete: if isExistingOwner(authorId) && request.auth.uid == authorId;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}