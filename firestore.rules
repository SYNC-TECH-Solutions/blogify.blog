/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and skipping schema enforcement.
 * It provides a flexible data structure while ensuring that only authorized users can modify data.
 *
 * Data Structure:
 * Blog posts are stored in a publicly readable collection, with author-only write access.
 *   /artifacts/{appId}/public/data/blog_posts/{blogPostId}
 *
 * Key Security Decisions:
 * - Public read access is enabled for blog posts to allow for easy display.
 * - Write access is restricted to the author of each blog post.
 * - List operation are open to all users.
 *
 * Denormalization for Authorization:
 * The 'BlogPost' entity includes an 'authorId' field. This field is used to enforce ownership during write operations,
 * avoiding the need for additional `get()` calls to determine authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access and restricts write access to the author of each blog post.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (get, list): Any user can read any blog post.
     * @allow (create): Only the author can create a blog post if the 'authorId' field matches their UID.
     * @allow (update, delete): Only the author of the existing blog post can modify or delete it.
     * @deny (create): A user attempts to create a blog post where 'authorId' does not match their UID.
     * @deny (update, delete): A user attempts to modify or delete a blog post they do not own.
     * @principle Enforces public read access with author-only write/delete permissions for blog posts.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      // Anyone can read blog posts.
      allow get, list: if true;

      // Only the author can create a blog post.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // Only the author can update or delete a blog post, and only if the document exists.
      allow update, delete: if isExistingOwner(resource.data.authorId);

    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}