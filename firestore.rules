/**
 * @fileoverview Firestore Security Rules for Blogify CMS.
 *
 * Core Philosophy:
 * This ruleset provides public read access to blog posts while restricting write access to authenticated administrators.
 *
 * Data Structure:
 * Blog posts are stored in a flat structure under `/artifacts/{appId}/public/data/blog_posts/{blogPostId}`. The `appId` is a unique identifier for the application.
 *
 * Key Security Decisions:
 * - Public read access is granted for all blog posts to allow wide consumption.
 * - Write access (create, update, delete) is restricted to authenticated users only.
 * - Schema validation is omitted in this prototyping phase for faster iteration.
 *
 * Denormalization for Authorization:
 * Not applicable, since blog posts are public.
 *
 * Structural Segregation:
 * All blog posts are stored under the `/public/data/blog_posts` collection, indicating they are intended for public consumption.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to blog posts and restricts write access to authenticated users.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (get, list) Allow anyone to read any blog post.
     * @allow (create, update, delete) Allow only authenticated users to write.
     * @deny Any unauthenticated user to write.
     * @principle Grants public read access while restricting write access to authenticated users.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to check if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}