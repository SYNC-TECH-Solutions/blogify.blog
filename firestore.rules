/**
 * @file Firestore Security Rules
 * @description This ruleset implements a public-read, owner-write model for blog posts.
 *
 * Data Structure:
 * - /blog_posts/{blogPostId}:  Stores blog post data.
 *
 * Key Security Decisions:
 * - Public Read:  All blog posts are publicly readable (get, list).
 * - Owner-Only Write: Only the author (identified by `authorId`) can create, update, or delete a blog post.
 * - `authorId` Validation:  On creation, the `authorId` field must match the authenticated user's UID.  Updates and deletes are only allowed if the `authorId` matches the authenticated user's UID and the document exists.
 * - No User Listing: Listing users is not permitted.
 *
 * Denormalization for Authorization:
 * - The `blog_posts` documents contain an `authorId` field. This denormalization is **essential** for security.
 *   Without it, the rules would need to query a separate `/users/{userId}` collection on every blog post write to check for ownership, which is not possible.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /blog_posts collection.
     * @path /blog_posts/{blogPostId}
     * @allow (get, list): Any user can read blog posts.
     * @allow (create): Only the author can create a blog post, and the authorId must match the authenticated user's UID.
     * @allow (update, delete): Only the author can update or delete a blog post, and the authorId must match the authenticated user's UID.
     * @deny (create): Non-authenticated users cannot create blog posts.
     * @deny (update, delete): Other users cannot update or delete someone else's blog post.
     * @principle Enforces public read access and owner-only write access for blog posts.
     */
    match /blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and if the document exists.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}