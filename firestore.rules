/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a public read, owner-only write model for blog posts.
 *
 * Data Structure:
 * All blog posts are stored under the `/artifacts/{appId}/public/data/blog_posts/{blogPostId}` path.
 *
 * Key Security Decisions:
 * - Read access to blog posts is public.
 * - Write access (create, update, delete) is restricted to the author of the blog post.
 * - The `authorId` field in each blog post must match the authenticated user's UID for write operations.
 *
 * Denormalization for Authorization:
 * - The `BlogPost` entity requires an `authorId` field to enable owner-only writes. This field is validated on create and used for authorization on update and delete.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures blog posts with public read access and author-only write access.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (get, list) All users can read blog posts.
     * @allow (create) Authenticated user can create a blog post with their UID as the authorId.
     *   Example:
     *   - request.auth.uid: "user123"
     *   - request.resource.data: { "authorId": "user123", ... }
     * @allow (update, delete) Authenticated user can update/delete a blog post if they are the author.
     *   Example:
     *   - request.auth.uid: "user123"
     *   - resource.data: { "authorId": "user123", ... }
     * @deny (create) An unauthenticated user attempts to create a blog post.
     * @deny (create) Authenticated user attempts to create a blog post with an authorId that doesn't match their UID.
     *   Example:
     *   - request.auth.uid: "user123"
     *   - request.resource.data: { "authorId": "user456", ... }
     * @deny (update, delete) Authenticated user attempts to update/delete a blog post they don't own.
     *   Example:
     *   - request.auth.uid: "user123"
     *   - resource.data: { "authorId": "user456", ... }
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      // Allows anyone to read blog posts
      allow get, list: if true;

      // Allows creation of a blog post if the authorId matches the authenticated user's ID.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // Allows updating and deleting a blog post if the authenticated user is the author and the document exists
      allow update, delete: if isExistingOwner(resource.data.authorId);

    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}