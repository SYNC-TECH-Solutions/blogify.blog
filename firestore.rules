/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a public read, owner-write model for blog posts.
 *
 * Data Structure:
 * - Blog posts are stored in `/artifacts/{appId}/public/data/blog_posts/{blogPostId}`.
 * - Each blog post contains an `authorId` field that links it to the author.
 *
 * Key Security Decisions:
 * - Listing blog posts is allowed for all users.
 * - Creating, updating, and deleting blog posts is restricted to the author of the post.
 * - The `appId` parameter is used to isolate data for different applications.
 *
 * Denormalization for Authorization:
 * - The `authorId` field is denormalized onto each blog post document to avoid costly `get()` calls. This allows for fast ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to blog posts and restricts write access to the author.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (list) Signed-in or anonymous user can list blog posts.
     * @allow (get) Signed-in or anonymous user can get a blog post.
     * @allow (create) User with UID 'user_abc' can create a blog post if `request.resource.data.authorId == request.auth.uid`.
     * @allow (update) User with UID 'user_abc' can update a blog post if they are the author (resource.data.authorId == request.auth.uid).
     * @allow (delete) User with UID 'user_abc' can delete a blog post if they are the author (resource.data.authorId == request.auth.uid) and the blog post exists.
     * @deny (create) User with UID 'user_xyz' cannot create a blog post with `request.resource.data.authorId == 'user_abc'`.
     * @deny (update) User with UID 'user_xyz' cannot update a blog post if they are not the author.
     * @deny (delete) User with UID 'user_xyz' cannot delete a blog post if they are not the author.
     * @principle Allows public read but enforces document ownership for writes.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(authorId) {
      return request.auth.uid == authorId;
    }

    function isExistingOwner(authorId) {
      return isOwner(authorId) && resource != null;
    }
  }
}