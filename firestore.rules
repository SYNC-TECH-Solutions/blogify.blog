/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes ease of prototyping by focusing on authorization and relational integrity,
 * while relaxing data shape validation. It uses a public-read, owner-write model for blog posts.
 *
 * Data Structure:
 * Blog posts are stored in a publicly readable collection: /artifacts/{appId}/public/data/blog_posts/{blogPostId}.
 *
 * Key Security Decisions:
 * - Blog posts are publicly readable.
 * - Blog post creation, updates, and deletion are restricted to the author.
 * - Data shape validation is minimized for rapid prototyping.
 *
 * Denormalization for Authorization:
 * The `BlogPost` documents MUST contain an `authorId` field that matches the authenticated user's UID for write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to blog posts, with owner-only writes.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (get, list) Allows any user (or no user) to read blog posts.
     * @allow (create) Allows a user to create a blog post if the 'authorId' field matches their UID.
     * @allow (update, delete) Allows a user to update/delete a blog post if they are the author ('authorId' field matches their UID) and the document exists.
     * @deny (create) Denies creation if the 'authorId' field does not match the user's UID.
     * @deny (update, delete) Denies update/delete if the user is not the author or if the document does not exist.
     * @principle Implements a public-read, owner-write access control pattern.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}