/**
 * @fileoverview Firestore Security Rules for Blogify CMS.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by implementing strict ownership and role-based access control.
 * It leverages denormalization and structural segregation to simplify rules and optimize performance.
 *
 * Data Structure:
 * - /artifacts/{__app_id}/public/data/blog_posts/{blogPostId}: Stores blog posts, with 'authorId' for ownership.
 * - /authors/{authorId}: Stores author profiles.
 *
 * Key Security Decisions:
 * - Authors can only create, update, and delete their own blog posts.
 * - Public read access is granted for published blog posts.
 * - Listing blog posts is allowed for any authenticated user, but only returns posts they are authorized to view.
 *
 * Denormalization for Authorization:
 * - The `authorId` field is denormalized within the `BlogPost` documents to enable efficient ownership checks without additional reads.
 *
 * Structural Segregation:
 * - Blog posts and author profiles are stored in separate collections to isolate access control concerns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows management of blog posts. Authors can create, update, and delete their own posts. Public read access is granted.
     * @path /artifacts/{__app_id}/public/data/blog_posts/{blogPostId}
     * @allow (create) - User with auth.uid "user123" can create a blog post with authorId "user123".
     * @allow (update) - User with auth.uid "user456" can update a blog post where resource.data.authorId is "user456".
     * @allow (delete) - User with auth.uid "user789" can delete a blog post where resource.data.authorId is "user789".
     * @allow (get, list) - Any user can read published blog posts.
     * @deny (create) - User with auth.uid "user123" cannot create a blog post with authorId "user456".
     * @deny (update) - User with auth.uid "user123" cannot update a blog post where resource.data.authorId is "user456".
     * @deny (delete) - User with auth.uid "user123" cannot delete a blog post where resource.data.authorId is "user456".
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /artifacts/{__app_id}/public/data/blog_posts/{blogPostId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      // Read rules
      allow get, list: if true;

      // Write rules
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows management of author profiles. Authors can only manage their own profiles.
     * @path /authors/{authorId}
     * @allow (create) - User with auth.uid "user123" can create an author profile with ID "user123".
     * @allow (update) - User with auth.uid "user456" can update their own author profile.
     * @allow (delete) - User with auth.uid "user789" can delete their own author profile.
     * @allow (get, list) - Any user can read author profiles.
     * @deny (create) - User with auth.uid "user123" cannot create an author profile with ID "user456".
     * @deny (update) - User with auth.uid "user123" cannot update the author profile of "user456".
     * @deny (delete) - User with auth.uid "user123" cannot delete the author profile of "user456".
     * @principle Enforces document ownership for all operations.
     */
    match /authors/{authorId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }

       function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }


      // Read rules
      allow get, list: if true;

      // Write rules
      allow create: if isOwner(authorId);
      allow update: if isExistingOwner(authorId);
      allow delete: if isExistingOwner(authorId);
    }
  }
}