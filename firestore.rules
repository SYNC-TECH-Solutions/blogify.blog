/**
 * @fileoverview Firestore Security Rules for Blogify CMS.
 *
 * Core Philosophy:
 * This ruleset provides public read access to blog posts while restricting write access to authenticated administrators.
 *
 * Data Structure:
 * Blog posts are stored in a flat structure under `/artifacts/{appId}/public/data/blog_posts/{blogPostId}`.  The `{appId}` is expected to be a fixed application ID.
 *
 * Key Security Decisions:
 * - Public read access is granted to all blog posts, based on the application's design for public content.
 * - Write operations are restricted to authenticated users.  The original design mentions an admin role, however this has not been implemented yet.
 * - Schema validation is relaxed to allow for rapid prototyping, except for validating the authorId on create.
 *
 * Denormalization for Authorization:
 * Not applicable, as only authentication is enforced for write access.
 *
 * Structural Segregation:
 * Not applicable, as all blog posts are considered public.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to blog posts and restricts write access to authenticated users.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (get, list): Any user can read a blog post.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete a blog post.
     * @deny (create, update, delete): Unauthenticated users cannot modify blog posts.
     * @principle Allows public read access and restricts write access to logged in users.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
  }
}