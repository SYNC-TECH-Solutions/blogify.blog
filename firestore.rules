/**
 * @fileoverview Firestore Security Rules for Blogify CMS.
 *
 * Core Philosophy:
 * This ruleset prioritizes a public-read, owner-write model for blog posts.
 * Anyone can read published blog posts, but only the author can modify or delete them.
 * Author profiles are private, with only the author having access.
 *
 * Data Structure:
 * - /artifacts/{__app_id}/public/data/blog_posts/{blogPostId}: Stores blog posts. 'authorId' is denormalized for authorization.
 * - /authors/{authorId}: Stores author profiles.
 *
 * Key Security Decisions:
 * - Public Read Access: Blog posts are readable by everyone.
 * - Owner-Only Writes: Only the author can create, update, or delete their blog posts.
 * - Author Profile Privacy: Author profiles are private, accessible only to the author.
 * - No User Listing: Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 * The 'authorId' field is denormalized onto the blog post document to avoid costly `get()` calls for authorization checks.
 *
 * Structural Segregation:
 * Public blog posts and private author data are stored in separate collections to simplify access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to blog posts, while restricting writes to the author.
     * @path /artifacts/{__app_id}/public/data/blog_posts/{blogPostId}
     * @allow (get, list): Anyone can read a blog post.
     * @allow (create): The author can create a blog post if the authorId matches their auth.uid.
     * @allow (update, delete): The author can update/delete their blog post.
     * @deny (create): A user cannot create a blog post if the authorId does not match their auth.uid.
     * @deny (update, delete): A user cannot update/delete someone else's blog post.
     * @principle Public read, owner-only writes. Denormalized authorId for efficient authorization.
     */
    match /artifacts/{__app_id}/public/data/blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Restricts access to author profiles to the author themselves.
     * @path /authors/{authorId}
     * @allow (get): The author can read their own profile.
     * @allow (create): The author can create their own profile if the authorId matches their auth.uid.
     * @allow (update, delete): The author can update/delete their own profile.
     * @deny (get): A user cannot read another user's profile.
     * @deny (create): A user cannot create a profile with an authorId that does not match their auth.uid.
     * @deny (update, delete): A user cannot update/delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /authors/{authorId} {
      allow get: if isSignedIn() && isOwner(authorId);
      allow create: if isSignedIn() && isOwner(authorId);
      allow update, delete: if isSignedIn() && isExistingOwner(authorId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}