/**
 * @fileoverview Firestore Security Rules for the CMS application.
 *
 * Core Philosophy:
 * This ruleset implements a public-read, owner-write model for blog posts,
 * ensuring that any user can read blog posts, but only the author can create, update, or delete their own posts.
 *
 * Data Structure:
 * Blog posts are stored under `/artifacts/{appId}/public/data/blog_posts/{blogPostId}`,
 * where `{appId}` represents the application ID and `{blogPostId}` is the unique identifier for each post.
 *
 * Key Security Decisions:
 * - Public read access is enabled for all blog posts.
 * - Only the author of a blog post can create, update, or delete it.
 * - Listing blog posts is allowed for all users.
 *
 * Denormalization for Authorization:
 * - The `BlogPost` entity includes an `authorId` field to directly associate the post with its author,
 *   avoiding the need for complex queries to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces public read access and author-only write access for blog posts.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (get, list): Any user can read and list blog posts.
     * @allow (create): Authenticated user with `authorId` matching their UID can create a blog post.
     * @allow (update, delete): Authenticated user with `authorId` matching the post's authorId can update/delete.
     * @deny (create): Authenticated user attempts to create a blog post with `authorId` not matching their UID.
     * @deny (update, delete): Non-authenticated user attempts to update or delete a blog post.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId The user ID to check against the resource's authorId and request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}