/**
 * @fileoverview Firestore Security Rules for the blog application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a public read model for published blog posts while strictly enforcing owner-only write access based on the authorId field.
 *
 * Data Structure:
 * Blog posts are stored in the `/blog_posts/{postId}` collection. Each document represents a single blog post with metadata, content, and an author ID.
 *
 * Key Security Decisions:
 * - Public Read Access: All users, including unauthenticated users, can read (get and list) published blog posts.
 * - Owner-Only Writes: Only the author of a blog post can create, update, or delete it.  The `authorId` field within the blog post document must match the authenticated user's UID.
 * - Denormalization for Authorization: The `authorId` field is crucial for authorization decisions. It's used to verify ownership on create, update, and delete operations, avoiding costly `get()` calls to other collections.
 * - Immutability of `authorId`: Once a blog post is created, its `authorId` cannot be changed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the `/blog_posts/{postId}` collection, allowing public read access and owner-only writes.
     * @path /blog_posts/{postId}
     * @allow (get, list): Any user can read published blog posts.
     * @allow (create): An authenticated user can create a blog post if the `authorId` field matches their UID.
     * @allow (update, delete): Only the author of the blog post can update or delete it.
     * @deny (create): An unauthenticated user cannot create a blog post.
     * @deny (update): A user cannot update a blog post if they are not the author.
     * @deny (delete): A user cannot delete a blog post if they are not the author.
     * @principle Enforces public read access for published content with owner-only writes.
     */
    match /blog_posts/{postId} {
      // Allow anyone to read published blog posts
      allow get: if true;
      allow list: if true;

      // Only allow the author to create, update, and delete blog posts
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // --- Helper Functions ---
    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource, the resource exists, and the owner ID matches the authenticated user's UID.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && resource != null && userId == request.auth.uid;
    }
  }
}