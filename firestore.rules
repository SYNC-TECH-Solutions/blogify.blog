/**
 * @fileoverview Firestore Security Rules for the Blog CMS.
 *
 * Core Philosophy:
 * This ruleset implements a public-read, owner-write model for blog posts. Any user can read the blog posts,
 * but only the author can create, update, or delete their own posts.  This is achieved by storing blog posts
 * in a publicly readable collection and enforcing ownership via the `authorId` field.
 *
 * Data Structure:
 * Blog posts are stored in the `/artifacts/{appId}/public/data/blog_posts/{blogPostId}` collection.
 * The `{appId}` parameter is intended to correspond to an environment variable, partitioning blog posts by application.
 *
 * Key Security Decisions:
 * - Public Read: Blog posts are publicly readable to allow for easy display.
 * - Owner-Only Writes: Only the author of a blog post can modify or delete it.
 * - No User Listing: There is no user collection, so listing users is not applicable.
 * - `appId` Path Parameter: The rules enforce that the `appId` parameter must be present in the path, acting as a namespace.
 *
 * Denormalization for Authorization:
 * The `BlogPost` entity MUST contain an `authorId` field. This field is used to enforce ownership. On create, the value of this
 * field MUST match the authenticated user's UID. On update and delete, the rule verifies that the `authorId` of the existing
 * document matches the authenticated user's UID. This avoids costly `get()` calls to a separate author document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access and restricts write access to the author of the blog post.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (get, list): Any user can read the blog posts.
     * @allow (create): An authenticated user can create a blog post if the `authorId` matches their UID.
     * @allow (update, delete): Only the author of the existing blog post can modify or delete it.
     * @deny (create): An unauthenticated user cannot create a blog post.
     * @deny (create): An authenticated user cannot create a blog post if the `authorId` does not match their UID.
     * @deny (update, delete): A user cannot modify or delete a blog post they do not own.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}