/**
 * @fileoverview Firestore Security Rules for Blogify CMS.
 *
 * Core Philosophy:
 * This ruleset provides public read access to blog posts, while restricting write access to authenticated users (admins).
 * Subscriptions are managed by admins only.
 *
 * Data Structure:
 * - /artifacts/{appId}/public/data/blog_posts/{blogPostId}: Stores public blog post data.
 * - /subscriptions/{subscriptionId}: Stores subscription data, accessible only to admins.
 *
 * Key Security Decisions:
 * - Public read access for blog posts is enabled.
 * - Admin role is implicitly determined by authentication status. Only authenticated users can write blog posts or subscriptions.
 * - The rules do NOT enforce the exact schema of the data, focusing on access control.
 *
 * Denormalization for Authorization:
 * - None: Blog posts are publicly readable; admin status is determined by authentication.
 *
 * Structural Segregation:
 * - Public blog posts are stored in a top-level collection, separate from any private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to blog posts, but restricts write access to authenticated users.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (get, list): Any user can read blog posts.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete blog posts.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete blog posts.
     * @principle Public read, admin-only write.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Restricts access to subscriptions collection to authenticated users (admins).
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list): Only authenticated users can read subscription data.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete subscription data.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete subscription data.
     * @principle Admin-only access.
     */
    match /subscriptions/{subscriptionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper function to determine if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
  }
}