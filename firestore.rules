/**
 * @fileoverview Firestore Security Rules for Blogify CMS.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access and owner-only write access for blog posts,
 * and owner-only access for author profiles.  It leverages denormalization of the `authorId` in blog posts
 * to avoid costly `get()` operations within the rules.
 *
 * Data Structure:
 * - /artifacts/{__app_id}/public/data/blog_posts/{blogPostId}: Stores blog post data, publicly readable.
 * - /authors/{authorId}: Stores author profile data, accessible only to the author.
 *
 * Key Security Decisions:
 * - Blog posts are publicly readable to enable wide content distribution.
 * - Only the author can create, update, or delete their blog posts.
 * - Authors can only manage their own profile information.
 * - The `list` operation is allowed for the blog_posts collection so that any user can list published content.
 *
 * Denormalization for Authorization:
 * The `authorId` is stored directly within each `/artifacts/{__app_id}/public/data/blog_posts/{blogPostId}` document. This avoids needing to perform a `get()` operation on `/authors/{authorId}` to check ownership, which would be less efficient and potentially lead to race conditions.
 *
 * Structural Segregation:
 * Blog posts are stored in a top-level collection separate from author profiles. This allows for public read access to blog posts without exposing sensitive author information.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to blog posts and restricts write access to the author.
     * @path /artifacts/{__app_id}/public/data/blog_posts/{blogPostId}
     * @allow (get, list): Any user can read or list published blog posts.
     * @allow (create): An authenticated user can create a blog post if the `authorId` matches their UID.
     * @allow (update, delete): Only the author of the blog post can update or delete it.
     * @deny (create): An unauthenticated user cannot create a blog post.
     * @deny (update, delete): A user who is not the author cannot update or delete the blog post.
     * @principle Allows public reads, restricts writes to the author.
     */
    match /artifacts/{__app_id}/public/data/blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Restricts access to author profiles to the owner.
     * @path /authors/{authorId}
     * @allow (get): The author can read their own profile.
     * @allow (create): An authenticated user can create their own profile if the `authorId` matches their UID.
     * @allow (update, delete): Only the author can update or delete their profile.
     * @deny (get): A user who is not the author cannot read the profile.
     * @deny (create): An unauthenticated user cannot create an author profile.
     * @deny (update, delete): A user who is not the author cannot update or delete the profile.
     * @principle Enforces document ownership for author profiles.
     */
    match /authors/{authorId} {
      allow get: if isSignedIn() && isOwner(authorId);
      allow create: if isSignedIn() && isOwner(authorId);
      allow update, delete: if isSignedIn() && isExistingOwner(authorId);
      allow list: if false;
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the resource's `authorId`.
     * @return {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}