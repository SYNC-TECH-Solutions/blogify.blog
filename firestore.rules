/**
 * @file Overview
 * This ruleset secures the Blogify CMS blog post data stored in Firestore.
 *
 * @core_philosophy All blog posts are treated as publicly readable, but write access is strictly limited to authenticated administrators.
 *
 * @data_structure Blog posts are stored in a flat structure under the path `/artifacts/{appId}/public/data/blog_posts/{blogPostId}`.  The `appId` identifies the Blogify CMS application, and `blogPostId` is the unique ID of the blog post.
 *
 * @key_security_decisions
 *   - Public read access for all blog posts.
 *   - Strict restriction of write access (create, update, delete) to authenticated users only. There are no role based permissions. All authenticated users can modify the data.
 *   - Listing of blog posts is allowed for everyone.
 *
 * @denormalization_for_authorization Not applicable, as all data is public and write access is limited to admins.
 *
 * @structural_segregation Not applicable, as drafts are not separated into private collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures blog posts, allowing public read access and authenticated-user-only write access.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (get, list): Any user can read blog posts.
     * @allow (create, update, delete): Only authenticated users can write blog posts.
     * @deny (create, update, delete): Unauthenticated users cannot write blog posts.
     * @principle Allows public read but restricts write access to authenticated admins.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}