/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and omitting data validation.
 * It uses a public-read, owner-write model for blog posts.
 *
 * Data Structure:
 * - /blog_posts/{postId}: Stores blog post data. Each document must have an `authorId` field matching the author's UID for write access.
 *
 * Key Security Decisions:
 * - Public Read: Allows all users (signed in or not) to read blog posts.
 * - Owner-Only Writes: Restricts blog post creation, updates, and deletions to the author (identified by `authorId`).
 * - No User Listing: There are no rules for `/users` collection, so user listing is implicitly denied.
 *
 * Denormalization for Authorization:
 * - The `authorId` field is denormalized onto the `blog_posts` documents to enable simple owner-based authorization rules.
 *
 * Structural Segregation:
 * - The `isPublished` field is used to determine if the post is visible to the public. Private posts and drafts are stored in the same collection and are only viewable by the author.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access control for individual blog posts.
     * @path /blog_posts/{postId}
     * @allow (get, list): Any user can read blog posts.
     * @allow (create): Only the authenticated user whose UID matches the `authorId` in the request can create a blog post.
     * @allow (update, delete): Only the authenticated user whose UID matches the `authorId` of the existing blog post can update or delete it.
     * @deny (create): An unauthenticated user attempts to create a blog post.
     * @deny (update): An authenticated user attempts to update a blog post where the `authorId` does not match their UID.
     * @deny (delete): An unauthenticated user attempts to delete a blog post.
     * @principle Public-read, owner-write with validation for authorId on create, update, and delete.
     */
    match /blog_posts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}