/**
 * @fileoverview Firestore Security Rules for Blogify CMS.
 *
 * Core Philosophy:
 * This ruleset enforces public read access for blog posts while restricting write access to authenticated administrators only.
 *
 * Data Structure:
 * Blog posts are stored in a flat structure under `/artifacts/{appId}/public/data/blog_posts/{blogPostId}`.  No user-based hierarchy is used.
 *
 * Key Security Decisions:
 * - Blog posts are publicly readable.
 * - Write access (create, update, delete) is strictly limited to authenticated administrators.
 * - No data validation beyond authorization is performed in this prototype phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to blog posts and restricts write access to authenticated administrators.
     * @path /artifacts/{appId}/public/data/blog_posts/{blogPostId}
     * @allow (get, list): Any user can read a blog post.
     * @allow (create, update, delete): Only an authenticated administrator can modify blog posts.
     * @deny (create): A non-authenticated user cannot create a blog post.
     * @deny (update): A non-authenticated user cannot update a blog post.
     * @deny (delete): A non-authenticated user cannot delete a blog post.
     * @principle Public read, admin-only write.
     */
    match /artifacts/{appId}/public/data/blog_posts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
  }
}