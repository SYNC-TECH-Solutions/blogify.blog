/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a public read, owner-write security model for blog posts.
 * @data_structure Blog posts are stored in the top-level `blog_posts` collection.  Each blog post contains an `authorId` field.
 * @key_security_decisions All blog posts are publicly readable. Only the author of a blog post can create, update, or delete it.
 * @denormalization The `BlogPost` entity requires an `authorId` field that must match the authenticated user's UID for write operations. This avoids needing to query the `Author` document for authorization.
 * @structural_segregation N/A - Public vs. private blog posts are managed with the `isPublished` boolean field within a single collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to blog posts, but restricts write access to the author.
     * @path /blog_posts/{blogPostId}
     * @allow (get, list) - Any user can read any blog post.
     * @allow (create) - User with UID 'user_abc' can create a blog post with authorId: 'user_abc'.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete a blog post if they are the author (authorId: 'user_abc').
     * @deny (create) - User with UID 'user_def' cannot create a blog post with authorId: 'user_abc'.
     * @deny (update, delete) - User with UID 'user_def' cannot update/delete a blog post if they are not the author.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /blog_posts/{blogPostId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is the owner of the existing document.
      * @param {string} userId The user ID to check against the resource's authorId.
      * @return {boolean} True if the user is the owner and the document exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}